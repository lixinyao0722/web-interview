{"./":{"url":"./","title":"简介","keywords":"","body":" web-interview web-interview 专门收集前端面试题目和答案。 "},"articles/ali-web-interview-1.html":{"url":"articles/ali-web-interview-1.html","title":"阿里前端社招面试题","keywords":"","body":" 阿里前端社招面试题1. CSS部分1.1. CSS盒模型1.2. box-sizing应用场景1.3. flex弹性布局1.4. 未知宽高元素如何水平垂直居中2. JS部分2.1. 原型链、对象、构造函数之间的关系2.2. JS常见跨域手段。jsonp原理、cors如何设置2.3. 对象数组深度拷贝实现原理2.4. 如何获取一个元素到视图顶部的距离2.5. getBoundingClientRect获取的top和offsetTop获取的top区别2.6. 事件委托2.7. XSS是什么，攻击原理，怎么预防2.8. webpack实现原理与机制2.9. webpack配置entry多入口时配合CommonChunkPlugin时，代码如何切割2.10. webpack.optimze.UglifyJsPlugin压缩速度慢，如何提升2.11. webpack loader原理和机制，有没有写过2.12. babel插件transform-runtime和stage-2的作用2.13. babel将ES6转换ES5原理2.14. ES6箭头函数this问题，常见拓展运算符2.15. 对JS模块化规范CommonJs、UMD、CMD的理解，与ES6模块有何区别3. 网络协议3.1. http2.0、https、websocket特性3.2. http返回码200和304含义4. 算法4.1. 分查找的时间复杂度是多少，如何计算5. 数据结构5.1. 线性顺序存储结构和链式存储结构有什么区别？以及优缺点6. 持续集成6.1. git大型项目合作，如何持续集成7. 现场实战题7.1. 白板写代码，用最简洁的代码实现数组去重。8. 开放性试题8.1. 说一下以往项目用到的技术栈，有何难点，是如何解决的。8.2. 说一下以往项目可以改进的地方以及做的优秀的地方。9. 参考 阿里前端社招面试题 1. CSS部分 1.1. CSS盒模型 document中所有元素被表示为一个盒子模型，描述元素所占空间内容。每个盒子共有4边，从外到内分别如下。 margin edge border edge padding edge content edge 标准盒模型height、width控制content，如下图。 IE盒模型height、width包括content、padding、border，如下图。 1.2. box-sizing应用场景 box-sizing的使用场景 box-sizing属性值 类型 含义 场景 border-box IE盒模型 width=content+padding+border 表单多项padding、border不同时保证长度一致 content-box 标准盒模型 width=content width - 1.3. flex弹性布局 Flex 布局教程：语法篇 Flex 布局示例 相关概念 名称 含义 flex container 采用 Flex 布局的元素 flex item 子元素 main axis 默认水平方向，主轴 cross axis 默认垂直方向，交叉轴 main start 主轴的开始位置（与边框的交叉点） main end 主轴的结束位置 cross start 交叉轴的开始位置 cross end 交叉轴的结束位置 main size flex item占据的主轴的空间 cross size cross item占据的主轴的空间 flex container属性 属性名 含义 可选值 默认值 flex-direction 设置主轴方向 row ; row-reverse ; column ; column-reverse row flex-wrap 设置flex item换行方式 nowrap ; wrap ; wrap-reverse nowrap flex-flow flex-direction和flex-wrap属性的简写形式 见flex-direction和flex-wrap可选值 row nowrap justify-content 定义flex item在主轴上的对齐方式 flex-start ; flex-end ; center ; space-between ; space-around flex-start align-items 定义flex item在交叉轴上的对齐方式 flex-start ; flex-end ; center ; baseline ; stretch stretch align-content 定义了多根主轴线的对齐方式，一根时该属性无效 flex-start ; flex-end ; center ; space-between ; space-around ; stretch stretch flex item属性 属性名 含义 可选值 默认值 order 定义item的排序顺序（小->大），可负数 整数 0 flex-grow container存在剩余空间时item的放大比例 非负整数 0（不放大） flex-shrink container空间不足时item的缩小比例 非负整数 1（正常缩小） flex-basis 定义在分配多余空间之前item占据的主轴空间。浏览器根据这个属性，计算主轴是否有多余空间 {length} ; auto auto flex flex-grow, flex-shrink 和 flex-basis的简写 见flex-grow, flex-shrink 和 flex-basis属性可选值 0 1 auto align-self 允许单个项目有与其他项目不一样的对齐方式，可覆盖align-items属性 auto ; flex-start ; flex-end ; center ; baseline ; stretch auto 1.4. 未知宽高元素如何水平垂直居中 假定未知宽高元素为item，其父元素为container，对container做以下css样式控制。 #container { background-color: #ffe665; height: 400px; display: flex; justify-content: center; align-items: center; } 2. JS部分 2.1. 原型链、对象、构造函数之间的关系 完整原型链详细图解（构造函数、原型、实例化对象） js原型链、对象及构造函数关系图如下， 点击下载 ProcessOn源文件。 关键属性 构造函数 构造函数.prototype 构造函数.prototype.constructor 实例对象.proto 构造函数 === 构造函数.prototype.constructor 构造函数.prototype === 实例对象.__proto__ 2.2. JS常见跨域手段。jsonp原理、cors如何设置 详解js跨域问题 cors方式 (cross origin resource share) 基本思想：利用自定义HTTP协议头让浏览器与服务器通讯，决定请求是否成功。 服务端设置 Access-Control-Allow-Origin: | * origin被允许跨域访问这个资源的网站，* 代表全部网站。浏览器会检测这个参数，如果符合才会获取资源。 Access-Control-Allow-Credentials: true | false 是否允许浏览器请求资源时携带cookie信息。该属性要XMLHttpRequest设置withCredentials = true。 前端 const xhr = new XMLHttpRequest() xhr.open('GET', 'http://example.com/data.php') // 使用绝对路径 xhr.withCredentials = true // 浏览器请求时带上example.com域名cookie xhr.onreadystatechange = (xhr, event) => { // 处理 } xhr.send() jsonp方式 原理：XMLHttpRequest无法请求不同域数据，但可以请求不同域script。jsonp需要前后端配合，代码样例如下。 前端部分 function doSomething(json){ //处理获得的json数据 const obj = JSON.parse(json) } 后端部分 $callback = urldecode(trim($_GET['callback'])); $data = [ \"ret\" => 0, \"msg\" => \"success\", \"data\" => [ \"id\" => 10000, \"name\" => \"Tom\", \"age\" => 20, ] ]; echo 'callback=(' . json_encode($data) . ')'; exit(); 优点兼容性好，古老的浏览器同样适用 缺点只支持GET方式请求不能解决不同域的两个页面之间如何进行JavaScript调用的问题 document.domain方式 window.name方式 window.postMessage 2.3. 对象数组深度拷贝实现原理 2.4. 如何获取一个元素到视图顶部的距离 2.5. getBoundingClientRect获取的top和offsetTop获取的top区别 2.6. 事件委托 2.7. XSS是什么，攻击原理，怎么预防 2.8. webpack实现原理与机制 2.9. webpack配置entry多入口时配合CommonChunkPlugin时，代码如何切割 2.10. webpack.optimze.UglifyJsPlugin压缩速度慢，如何提升 2.11. webpack loader原理和机制，有没有写过 2.12. babel插件transform-runtime和stage-2的作用 2.13. babel将ES6转换ES5原理 2.14. ES6箭头函数this问题，常见拓展运算符 2.15. 对JS模块化规范CommonJs、UMD、CMD的理解，与ES6模块有何区别 3. 网络协议 3.1. http2.0、https、websocket特性 3.2. http返回码200和304含义 4. 算法 4.1. 分查找的时间复杂度是多少，如何计算 5. 数据结构 5.1. 线性顺序存储结构和链式存储结构有什么区别？以及优缺点 6. 持续集成 6.1. git大型项目合作，如何持续集成 7. 现场实战题 7.1. 白板写代码，用最简洁的代码实现数组去重。 8. 开放性试题 8.1. 说一下以往项目用到的技术栈，有何难点，是如何解决的。 8.2. 说一下以往项目可以改进的地方以及做的优秀的地方。 9. 参考 面试分享：一年经验初探阿里巴巴前端社招 "}}